#!/usr/bin/env python

"""
    Plugin to show setpoint and measured temperature of zone.
    Also show the outside temperature based on location
    
    To make this plugin work make sure you install the following:

    evohomeclient http://evohome-client.readthedocs.org/en/latest/
    #pip install ./evohome-client

    python-weather-api https://code.google.com/p/python-weather-api/
    #pip install --allow-all-external  pywapi  --allow-unverified pywapi


    ex: /etc/munin/plugin-conf.d/plugins
    [evohome*]
    user root

    To activate the plugin make a symlink
    #ln -s /usr/local/share/munin/plugins/evohome_ /usr/local/etc/munin/plugins/evohome_Zonename
    
    For zone names containing spaces, replace the spaces with underscores in the symlink name
"""


import os
import logging
import time
import sys
import json
import io
from pprint import pprint
import pywapi
from munin import MuninPlugin
from evohomeclient import EvohomeClient


class EvohomeMuninPlugin(MuninPlugin):
    
    """
    Set the below values to your own account

    Look up your location id at weather.com
    """
    username = 'user@mail.com' 
    password = 'yoursecretpassword'
    location = 'NLXX0010'  
    
    args = "--base 1000"  # -l 0 --upper-limit 40"
    vlabel = "temperature"
    scale = True

    fields = (
        ('temp', dict(
            label="Temperature",
            info="Temperature in Room",
            type="GAUGE",
            max="50"
        )),
        ('setpoint', dict(
            label="Temperature SP",
            info="Temperature Setpoint in Room",
            type="GAUGE",
            max="35",
            min="5"
        )),
        ('outside_temperature', dict(
            label="Outside Temperature",
            info="Temperature outside at location",
            type="GAUGE",
        )),
    )

    zonename_in_args = True
    category = "domotic"

    # This is the file which has the zone data
    PERSISTENT_STORAGE = "/tmp/munin-zone-data.json"
    WEATHER_DATA = "/tmp/munin-outside-temperature.json"

    def __init__(self):
        super(EvohomeMuninPlugin, self).__init__()
        self.zonename = (sys.argv[0].split('_', 1)[-1].replace('_',' ')
                if self.zonename_in_args else None)
    # write zone info to JSON file
    # if the file is not older than 5 minutes we don't need to fetch the data
    def write_zone_info(self):

        # Read or construct data persitent data
        try:
            data = json.load(io.open(self.PERSISTENT_STORAGE, "rb"))
        except:
            data = []

        try:
            stat = os.stat(self.PERSISTENT_STORAGE)
        except OSError:
            age_minutes = 10
        else:
            age_minutes = (time.time() - stat.st_mtime) / 60
                
        if age_minutes >= 5:
            client = EvohomeClient(self.username, self.password)
            for device in client.temperatures():
                data.append(device)

            with io.open(self.PERSISTENT_STORAGE, "wb") as f:
                json.dump(data, f)
            f.close()

    # write weather data to JSON file
    # if the file is not older than 15 minutes we don't need to fetch the data
    def write_weather_info(self):
        try:
            data = json.load(io.open(self.WEATHER_DATA, "rb"))
        except:
            data = []

        try:
            stat = os.stat(self.WEATHER_DATA)
        except OSError:
            age_minutes = 20
        else:
            age_minutes = (time.time() - stat.st_mtime) / 60
                
        if age_minutes >= 15:
            weather_com_result = pywapi.get_weather_from_weather_com(self.location,  units = 'metric' ) 
            weather = dict()

            temp = weather_com_result['current_conditions']['temperature']    
            station = weather_com_result['current_conditions']['station']    
            weather['temperature'] = temp
            weather['station'] = station

            with io.open(self.WEATHER_DATA, "wb") as f:
                json.dump(weather, f)
            f.close()

    # Get room temperature
    def getzoneinfo(self):
        self.write_zone_info()
        self.write_weather_info()

        # Read  zone data
        try:
            data = json.load(io.open(self.PERSISTENT_STORAGE, "rb"))
        except:
            data = []

        # Read weather data
        try:
            data_weather = json.load(io.open(self.WEATHER_DATA, "rb"))
        except:
            data_weather = []

        outside_temperature = data_weather['temperature']
        # get the info from the requested zone
        for i in data:
            if i['name'] == self.zonename:
                temperature = i['temp']
                setpoint = i['setpoint']

        return temperature, setpoint,outside_temperature


    @property
    def title(self):
        return "Room temperature %s" % self.zonename

    def execute(self):
        temperature, setpoint, outside_temperature = self.getzoneinfo()
        values = dict()
        
        values['temp'] = temperature
        values['setpoint'] = setpoint
        values['outside_temperature'] = outside_temperature 
        #print "temp.value %s" % temperature
        #print "setpoint.value %s" % setpoint
        return values


if __name__ == "__main__":
    EvohomeMuninPlugin().run()

